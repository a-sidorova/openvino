// Copyright (C) 2018-2022 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#pragma once

#include "ngraph/op/op.hpp"
#include "snippets/emitter.hpp"
#include "ngraph/op/parameter.hpp"

namespace ngraph {
namespace snippets {
namespace op {

/**
 * @interface Tile
 * @brief Generated by Canonicalization and represents Loop in affine notation
 * @ingroup snippets
 */
class Tile : public ngraph::op::Op {
public:
    OPENVINO_OP("Tile", "SnippetsOpset");

    /// \brief Construct an Tile
    /// \param region The vector of pairs: emitters and the corresponding registers
    /// \param increment Tile size - count of elements to load and store.
    ///                  Vector Tile should have size of vector register and Scalar Tile should have 1
    /// \param num_inputs Count of inputs
    /// \param num_outputs Count of outputs
    /// \param io_dims Vector of last dimensions of inputs and outputs
    /// \param io_data_sizes Vector of data type sizes of inputs and outputs
    Tile(const std::vector<AllocatedEmitter>& region, size_t increment, size_t num_inputs, size_t num_outputs,
         const std::vector<size_t>& io_dims, const std::vector<size_t>& io_data_sizes);
    Tile() = default;
    std::vector<AllocatedEmitter> region;
    size_t increment = 0;
    size_t num_inputs = 0;
    size_t num_outputs = 0;
    std::vector<size_t> io_dims {};
    std::vector<size_t> io_data_size {};

    std::shared_ptr<Node> clone_with_new_inputs(const OutputVector& inputs) const override {
        return std::make_shared<Tile>(region, increment, num_inputs, num_outputs, io_dims, io_data_size);
    }
};

class TileBase : public ngraph::op::Op {
public:
    OPENVINO_OP("TileBase", "SnippetsOpset");
    TileBase(const std::vector<Output<Node>>& args, size_t tileRank, size_t workAmount, size_t increment);
    TileBase() = default;
    bool visit_attributes(AttributeVisitor& visitor) override;
    size_t get_work_amount() {return workAmount;}
    size_t get_increment() {return increment;}

protected:
    size_t tileRank;
    size_t workAmount;
    size_t increment;
};

class TileBegin : public TileBase {
    friend class TileEnd;
public:
    OPENVINO_OP("TileBegin", "SnippetsOpset");
    TileBegin(const std::vector<Output<Node>>& args, size_t tileRank, size_t workAmount, size_t increment);
    TileBegin() = default;
    void validate_and_infer_types() override;
    std::shared_ptr<Node> clone_with_new_inputs(const OutputVector& inputs)  const override;
    const uint8_t** get_address_ptr() {return &begin_address;}
    std::vector<size_t>& get_input_regs() {return input_regs;}
//    std::vector<size_t> input_regs;
    const uint8_t* begin_address;
    std::vector<size_t> input_regs;
};

class TileEnd : public TileBase {
    friend class TileBegin;

public:
    OPENVINO_OP("TileEnd", "SnippetsOpset");
    // todo: hide this constructor, as this is not an intended way to create TileEnd
    TileEnd(const std::vector<Output<Node>>& args);
    TileEnd() = default;
    void validate_and_infer_types() override;
    std::shared_ptr<Node> clone_with_new_inputs(const OutputVector& inputs)  const override;
};

template<typename T>
std::shared_ptr<TileBegin> insertTileBegin(const T& afterTheseNodes, size_t rank, size_t workAmount, size_t increment) {
    static_assert(std::is_same<T, ParameterVector>() || std::is_same<T, NodeVector>(),
            "Unsupported template parameter for insertTileBegin. Only ParameterVector or NodeVector is allowed");
    OutputVector originalOutputs;
    std::vector<std::set<Input<Node>>> childInputs;
    for (const auto &p : afterTheseNodes) {
        const auto & out = p->output(0);
        originalOutputs.push_back(out);
        childInputs.push_back(out.get_target_inputs());
    }
    auto tileBegin = std::make_shared<TileBegin>(originalOutputs, rank, workAmount, increment);

    for (int i = 0; i < childInputs.size(); i++) {
        for (auto& input : childInputs[i]) {
            input.replace_source_output(tileBegin->output(i));
        }
    }
    return tileBegin;
}

template<typename T>
std::shared_ptr<TileEnd> insertTileEnd(const T& beforeTheseNodes, const std::shared_ptr<TileBegin>& tileBegin) {
    static_assert(std::is_same<T, ResultVector>() || std::is_same<T, NodeVector>(),
                  "Unsupported template parameter for insertTileBegin. Only ParameterVector or NodeVector is allowed");
    OutputVector parentOutputs;
    std::vector<Input<Node>> originalInputs;
    for (const auto &p : beforeTheseNodes) {
        const auto &in = p->input(0);
        originalInputs.push_back(in);
        parentOutputs.push_back(in.get_source_output());
    }
    parentOutputs.push_back(tileBegin->output(tileBegin->get_output_size() - 1));
    auto tileEnd = std::make_shared<TileEnd>(parentOutputs);

    for (int i = 0; i < originalInputs.size(); i++) {
        originalInputs[i].replace_source_output(tileEnd->output(i));
    }
    return tileEnd;
}

} // namespace op
} // namespace snippets
} // namespace ngraph